import React, { useState } from 'react';

interface JobResult {
  title: string;
  company: string;
  location: string;
  description: string;
  match_score: number;
}

interface ResultCardProps {
  job: JobResult;
  index: number;
}

const ResultCard: React.FC<ResultCardProps> = ({ job, index }) => {
  const [expanded, setExpanded] = useState(false);
  const [isSaved, setIsSaved] = useState(false);
  
  // Format the match score as a percentage
  const formattedScore = `${(job.match_score * 100).toFixed(1)}%`;
  
  // Determine the badge color and style based on match score
  const getMatchScoreBadge = (score: number) => {
    if (score >= 0.8) {
      return {
        color: 'badge-success',
        borderColor: 'border-green-500',
        icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
        label: 'Excellent Match'
      };
    }
    if (score >= 0.6) {
      return {
        color: 'badge-primary',
        borderColor: 'border-blue-500',
        icon: 'M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z',
        label: 'Good Match'
      };
    }
    if (score >= 0.4) {
      return {
        color: 'badge-warning',
        borderColor: 'border-yellow-500',
        icon: 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z',
        label: 'Possible Match'
      };
    }
    
    return {
      color: 'badge-error',
      borderColor: 'border-red-500',
      icon: 'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z',
      label: 'Low Match'
    };
  };
  
  const badgeInfo = getMatchScoreBadge(job.match_score);
  
  // Extract potential keywords from job description
  const extractKeywords = (text: string) => {
    // This is a simple extraction - in a real app you'd use NLP
    const technicalTerms = [
      'JavaScript', 'React', 'Angular', 'Vue', 'Node.js', 'TypeScript', 
      'Python', 'Django', 'Flask', 'Java', 'Spring', 'C#', '.NET',
      'SQL', 'NoSQL', 'MongoDB', 'PostgreSQL', 'MySQL', 'Redis',
      'AWS', 'Azure', 'GCP', 'Docker', 'Kubernetes', 'CI/CD',
      'Machine Learning', 'AI', 'Data Science', 'Big Data', 'Analytics',
      'DevOps', 'Agile', 'Scrum', 'Product Management', 'UI/UX'
    ];
    
    // Find all technical terms in the description
    return technicalTerms.filter(term => 
      new RegExp(`\\b${term}\\b`, 'i').test(text)
    ).slice(0, 8); // Limit to 8 keywords
  };
  
  const keywords = extractKeywords(job.description);
  
  return (
    <div className={`card border-l-4 hover:shadow-md transition-all duration-300 stagger-card animate-fade-slide-up ${badgeInfo.borderColor}`}>
      <div className="relative">
        {/* Rank indicator */}
        <div className="absolute top-0 right-0 bg-indigo-600 text-white w-6 h-6 rounded-bl-lg flex items-center justify-center">
          <span className="font-bold text-xs">{index + 1}</span>
        </div>
        
        <div className="flex justify-between items-start">
          <div className="flex-grow pr-4">
            <h3 className="text-base font-bold text-gray-900 mb-1 flex items-center">
              {job.title}
              {job.match_score >= 0.7 && (
                <span className="ml-2 badge badge-primary text-xs">
                  Top Match
                </span>
              )}
            </h3>
            <div className="flex items-center text-gray-600 mb-2 text-sm">
              <div className="flex items-center mr-3">
                <svg className="h-4 w-4 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                <span className="font-medium">{job.company}</span>
              </div>
              
              <div className="flex items-center">
                <svg className="h-4 w-4 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>{job.location}</span>
              </div>
            </div>
            
            <div className="flex items-center mb-3">
              <span className={`badge ${badgeInfo.color} flex items-center`}>
                <svg className="h-3.5 w-3.5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={badgeInfo.icon} />
                </svg>
                {formattedScore} - {badgeInfo.label}
              </span>
            </div>
          </div>
          
          <div className="flex items-center">
            <div className="h-16 w-16 flex items-center justify-center rounded-full border-2 border-indigo-100">
              <div className="h-12 w-12 rounded-full bg-indigo-600 flex items-center justify-center text-white font-bold text-sm">
                {Math.round(job.match_score * 100)}%
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-4">
          {keywords.length > 0 && (
            <div className="mb-3">
              <div className="text-sm text-gray-700 mb-1 font-medium">Skills</div>
              <div className="flex flex-wrap">
                {keywords.map((keyword, i) => (
                  <span key={i} className="bg-gray-50 text-gray-700 text-xs font-medium mr-1.5 mb-1.5 px-2 py-1 rounded border border-gray-100">
                    {keyword}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          <div className={`text-gray-700 text-sm ${expanded ? 'max-h-none' : 'max-h-24 overflow-hidden relative'}`}>
            {!expanded && (
              <div className="absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-white to-transparent"></div>
            )}
            <p className="whitespace-pre-line leading-relaxed">
              {job.description}
            </p>
          </div>
          
          <button
            onClick={() => setExpanded(!expanded)}
            className="mt-2 flex items-center text-indigo-600 hover:text-indigo-800 text-sm font-medium transition-colors duration-200"
          >
            {expanded ? (
              <>
                <svg className="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                </svg>
                Show less
              </>
            ) : (
              <>
                <svg className="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
                Read more
              </>
            )}
          </button>
        </div>

        <div className="mt-4 pt-3 border-t border-gray-100 flex justify-between items-center">
          <div className="flex items-center space-x-1">
            <div className="text-xs text-gray-500">Recently posted</div>
          </div>
          
          <div className="flex space-x-2">
            <button 
              onClick={() => setIsSaved(!isSaved)}
              className={`btn btn-sm ${isSaved ? 'btn-success' : 'btn-secondary'} flex items-center`}
            >
              <svg className="h-3.5 w-3.5 mr-1" fill={isSaved ? "currentColor" : "none"} stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
              </svg>
              {isSaved ? 'Saved' : 'Save'}
            </button>
            
            <a 
              href={`https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job application`)}`}
              target="_blank"
              rel="noopener noreferrer"
              className="btn btn-sm btn-primary flex items-center"
            >
              <svg className="h-3.5 w-3.5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
              </svg>
              Apply
            </a>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultCard;
